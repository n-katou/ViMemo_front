import React, { useEffect, useState } from 'react';
import type { AppProps } from 'next/app';
import Head from 'next/head';
import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import ScrollButtons from '../components/ScrollButtons';
import "../styles/globals.css";
import { AuthProvider, useAuth } from "../context/AuthContext";
import { FlashMessageProvider, useFlashMessage } from '../context/FlashMessageContext';
import { useRouter } from 'next/router';
import { analytics } from '../lib/initFirebase';
import { logEvent } from 'firebase/analytics';
import { ThemeProvider } from 'next-themes';
import type { Metadata } from "next";
import Script from 'next/script';

interface AuthenticatedAppProps {
  Component: AppProps['Component'];
  pageProps: AppProps['pageProps'];
  appRouter: AppProps['router'];
}

const protectedRoutes = ['/mypage/dashboard', '/mypage/edit', '/mypage/favorite_videos', '/mypage/favorite_notes', '/mypage/my_notes', '/mypage/playlists'];

export const metadata: Metadata = {
  title: "ViMemo",
  description: "Generated by create next app",
  icons: {
    apple: "/apple-touch-icon-web.png",
  },
  themeColor: "#000",
  appleWebApp: {
    title: "ViMemo",
  },
  twitter: {
    card: "summary_large_image",
    title: "ViMemo",
    description: "動画視聴中、直感的にメモを追加できるサービス",
    images: ["/pinterest_board_photo.png"],
  },
};

function AuthenticatedApp({ Component, pageProps, appRouter }: AuthenticatedAppProps) {
  const { currentUser, loading } = useAuth();
  const { setFlashMessage } = useFlashMessage();
  const router = useRouter();

  const publicRoutes = ['/login', '/signup', '/oauth/return'];
  const isPublicRoute = publicRoutes.includes(appRouter.pathname);
  const adminEmail = process.env.NEXT_PUBLIC_ADMIN_EMAIL;

  useEffect(() => {
    if (!loading) {
      const isUnauthorized = !currentUser || currentUser.email !== adminEmail;

      // 管理者以外はログインページとサインアップページ以外にアクセスできない
      if (!isPublicRoute && isUnauthorized) {
        setFlashMessage('アクセス権限がありません', 'error');
        router.push('/login');
      }
    }
  }, [currentUser, loading, appRouter.pathname, isPublicRoute, setFlashMessage, router, adminEmail]);

  if (loading) {
    return <LoadingSpinner loading={loading} />;
  }

  const isUnauthorized = !currentUser || currentUser.email !== adminEmail;
  if (!isPublicRoute && isUnauthorized) {
    return null;
  }

  return <Component {...pageProps} />;
}

const MyApp = ({ Component, pageProps, router }: AppProps) => {
  const nextRouter = useRouter();

  useEffect(() => {
    const handleRouteChange = (url: string) => {
      if (analytics) {
        logEvent(analytics, 'page_view', { page_path: url });
      }
    };

    nextRouter.events.on('routeChangeComplete', handleRouteChange);

    return () => {
      nextRouter.events.off('routeChangeComplete', handleRouteChange);
    };
  }, [nextRouter.events]);

  // ログインページなど特定のページではボタンを非表示にする（オプション）
  const hideScrollButtonsOnPages = ['/login', '/signup']; // ここに非表示にしたいページを追加
  const shouldShowScrollButtons = !hideScrollButtonsOnPages.includes(nextRouter.pathname);

  return (
    <>
      <Head>
        <title>ViMemo</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="description" content="ViMemoは、動画視聴中に直感的にメモを追加できるサービスです。" />
        <meta property="og:title" content="ViMemo" />
        <meta property="og:description" content="動画視聴中、直感的にメモを追加できるサービス" />
        <meta property="og:image" content="https://vimemo.vercel.app/pinterest_board_photo.png" />
        <meta property="og:url" content="https://vimemo.vercel.app" />
        <meta property="og:type" content="website" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:image" content="https://vimemo.vercel.app/pinterest_board_photo.png" />
        <link rel="canonical" href="https://vimemo.vercel.app" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon-web.png" />
        <link rel="manifest" href="/site.webmanifest" />
      </Head>
      <FlashMessageProvider>
        <AuthProvider>
          <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
            <div id="root" className="min-h-screen flex flex-col">
              <Header />
              <main className="flex-grow">
                <AuthenticatedApp Component={Component} pageProps={pageProps} appRouter={router} />
              </main>
              <Script
                async
                src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8463657129176689"
                strategy="afterInteractive"
                crossOrigin="anonymous"
              />
              <Footer />
              {/* すべてのページに適用（ログイン・サインアップページでは非表示） */}
              {shouldShowScrollButtons && <ScrollButtons />}
            </div>
          </ThemeProvider>
        </AuthProvider>
      </FlashMessageProvider>
    </>
  );
};

export default MyApp;
